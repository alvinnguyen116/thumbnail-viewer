{"version":3,"sources":["utils/index.js","utils/enums.js","components/Dimensions/Dimension/Dimension.js","components/Dimensions/Dimensions.js","components/ImageSelector/ImageSelector.js","components/Preview/Preview.js","components/Header/Header.js","components/App/App.js","index.js"],"names":["tryCatch","callback","err","console","error","GLOBALS","Object","freeze","TITLE","createDimensionConfig","width","height","title","YTConfig","Dimension","update","onDelete","useState","form","setForm","onChange","property","accessor","item","obj","copy","cloneDeep","onBlur","defaultValue","type","e","value","target","inputProps","classes","root","props","button","color","variant","component","size","className","Input","Button","onClick","Dimensions","dimensions","setDimensions","index","splice","buttonProps","dimensionElements","map","i","localProps","localValue","trim","parseInt","Math","min","window","innerWidth","innerHeight","toString","inputId","ImageSelector","setFile","filename","setFilename","onClear","id","style","display","multiple","accept","file","files","name","htmlFor","Preview","config","url","backgroundImage","renderImg","Header","App","setUrl","useEffect","URL","revokeObjectURL","File","newUrl","createObjectURL","src","Promise","resolve","image","Image","onload","setAttribute","then","renderPreview","previewElements","filter","transitionProps","in","appear","mountOnEnter","unmountOnExit","timeout","enter","Transition","state","renderSpinner","CircularProgress","renderBody","renderRightRail","ReactDOM","render","document","getElementById","querySelector"],"mappings":"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","file":"static/js/main.bdd95ca5.chunk.js","sourcesContent":["/**\r\n * @param {string} src\r\n * @desc Programmatically load an image.\r\n * @return {Promise} Resolves with original src.\r\n */\r\nexport const loadImage = src => new Promise(resolve => {\r\n  const image = new Image()\r\n  image.onload = () => resolve(src)\r\n  image.setAttribute('src', src)\r\n})\r\n\r\n/**\r\n * @desc A wrapper for executing anon functions safely.\r\n * @param {function} callback\r\n */\r\nexport const tryCatch = callback => {\r\n  try {\r\n    callback()\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n}","export const GLOBALS = Object.freeze({\r\n  TITLE: 'Thumbnail Viewer'\r\n})\r\n\r\nexport const createDimensionConfig = (width, height, title) => ({ width, height, title })\r\n\r\nexport const YTConfig = Object.freeze([\r\n  createDimensionConfig(290, 163, 'Monitor'),\r\n  createDimensionConfig(276, 155, 'Laptop'),\r\n  createDimensionConfig(168, 94, 'Up Next'),\r\n  createDimensionConfig(100, 56, 'Playlist')\r\n])","import React, { useState } from 'react'\r\nimport { cloneDeep } from 'lodash'\r\nimport Input from '@material-ui/core/Input'\r\nimport Button from '@material-ui/core/Button'\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded'\r\nimport { tryCatch } from '../../../utils'\r\nimport './Dimension.scss'\r\n\r\n/**\r\n * @param {int} width\r\n * @param {int} height\r\n * @param {string} title\r\n * @param {function} update\r\n * @param {function} onDelete\r\n * @desc A dimension form row.\r\n */\r\nconst Dimension = ({ width, height, title, update, onDelete }) => {\r\n\r\n  // COMPONENT STATE ----------------------------------------------------------\r\n\r\n  const [form, setForm] = useState({ width, height, title })\r\n\r\n  // HANDLERS -----------------------------------------------------------------\r\n\r\n  /**\r\n   * @desc A change handler for a controlled form.\r\n   */\r\n  const onChange = (property, accessor = item => item) => obj => {\r\n    tryCatch(() => {\r\n      const copy = cloneDeep(form)\r\n      copy[property] = accessor(obj)\r\n      setForm(copy)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @desc On blur, update if the value exists, else reset the form.\r\n   */\r\n  const onBlur = (property, defaultValue, type = 'string') => e => {\r\n    tryCatch(() => {\r\n      const { value } = e.target\r\n      if (value) {\r\n        update(property, value, type, onChange(property))\r\n      } else {\r\n        onChange(property)(defaultValue)\r\n      }\r\n    })\r\n  }\r\n\r\n  const inputProps = {\r\n    classes: {\r\n      root: 'input'\r\n    }\r\n  }\r\n\r\n  const props = {\r\n    width: {\r\n      ...inputProps,\r\n      type: 'number',\r\n      value: form.width,\r\n      onChange: onChange('width', e => e.target.value),\r\n      onBlur: onBlur('width', form.width, 'int')\r\n    },\r\n    height: {\r\n      ...inputProps,\r\n      type: 'number',\r\n      value: form.height,\r\n      onChange: onChange('height', e => e.target.value),\r\n      onBlur: onBlur('height', form.height, 'int')\r\n    },\r\n    title: {\r\n      ...inputProps,\r\n      type: 'text',\r\n      value: form.title,\r\n      onChange: onChange('title', e => e.target.value),\r\n      onBlur: onBlur('title', form.title)\r\n    },\r\n    button: {\r\n      classes: {\r\n        root: 'button'\r\n      },\r\n      color: 'secondary',\r\n      variant: 'contained',\r\n      component: 'span',\r\n      size: 'small'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={'dimension-container display-grid'}>\r\n      <div className={'dimension display-grid'}>\r\n        <div className={'title display-grid'}>\r\n          <Input {...props.title} />\r\n          <span className={'bold'}>:</span>\r\n        </div>\r\n        <div className={'width-and-height display-grid'}>\r\n          <Input {...props.width} />\r\n          <span className={'bold'}>x</span>\r\n          <Input {...props.height} />\r\n        </div>\r\n      </div>\r\n      <Button {...props.button} onClick={onDelete}>\r\n        <ClearRoundedIcon />\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dimension","import React from 'react'\r\nimport { cloneDeep } from 'lodash'\r\nimport Button from '@material-ui/core/Button'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\nimport Dimension from './Dimension/Dimension'\r\nimport { createDimensionConfig, YTConfig } from '../../utils/enums'\r\nimport { tryCatch } from '../../utils'\r\nimport './Dimensions.scss'\r\n\r\n/**\r\n * @param {[]} dimensions\r\n * @param {function} setDimensions\r\n * @desc Displays dimensions.\r\n */\r\nconst Dimensions = ({ dimensions, setDimensions }) => {\r\n\r\n  // HANDLERS -----------------------------------------------------------------\r\n\r\n  /**\r\n   * @desc A HOF for updating the index-th dimension.\r\n   */\r\n  const updateDimension = index => (property, value, type = 'string', onChange) => {\r\n    tryCatch(() => {\r\n      const copy = cloneDeep(dimensions)\r\n      let localValue = value.trim()\r\n      if (type === 'int') {\r\n        localValue = parseInt(value, 10)\r\n        if (property === 'width') {\r\n          localValue = Math.min(localValue, window.innerWidth / 2)\r\n        } else if (property === 'height') {\r\n          localValue = Math.min(localValue, window.innerHeight / 2)\r\n        }\r\n      }\r\n      copy[index][property] = localValue\r\n      setDimensions(copy)\r\n      onChange(localValue.toString())\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @desc A HOF for deleting a dimension.\r\n   */\r\n  const onDelete = index => () => {\r\n    tryCatch(() => {\r\n      const copy = cloneDeep(dimensions)\r\n      copy.splice(index, 1)\r\n      setDimensions(copy)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @desc Adds a dimension.\r\n   */\r\n  const onAdd = () => {\r\n    tryCatch(() => {\r\n      const copy = cloneDeep(dimensions)\r\n      setDimensions([\r\n        ...copy,\r\n        createDimensionConfig(0, 0, '')\r\n      ])\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @desc Resets dimensions.\r\n   */\r\n  const onReset = () => {\r\n    tryCatch(() => {\r\n      setDimensions(YTConfig)\r\n    })\r\n  }\r\n\r\n  // COMPONENTS ---------------------------------------------------------------\r\n\r\n  const buttonProps = {\r\n    classes: {\r\n      root: 'button'\r\n    },\r\n    variant: 'contained',\r\n    component: 'span'\r\n  }\r\n\r\n  const dimensionElements = dimensions.map((props, i) => {\r\n    const localProps = {\r\n      ...props,\r\n      update: updateDimension(i),\r\n      onDelete: onDelete(i)\r\n    }\r\n    return (<Dimension key={`${props.title}-${i}`} {...localProps} />)\r\n  })\r\n\r\n  return (\r\n    <div className={'dimensions-container'}>\r\n      <div className={'app-label'}>\r\n        Dimensions\r\n      </div>\r\n      <div className={'dimensions special-scroll'}>\r\n        {dimensionElements}\r\n      </div>\r\n      <div className={'buttons display-grid'}>\r\n        <Button {...buttonProps} onClick={onReset}>\r\n          <RefreshIcon />\r\n        </Button>\r\n        <Button {...buttonProps} onClick={onAdd}>\r\n          <AddIcon />\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dimensions","import React, { useState} from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera'\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded'\r\nimport { tryCatch } from '../../utils'\r\nimport './ImageSelector.scss'\r\n\r\nconst inputId = 'image-selector-input'\r\n\r\n/**\r\n * @param {string} className\r\n * @param {function} setFile\r\n * @desc Upload and de-select an image.\r\n */\r\nconst ImageSelector = ({ className = '', setFile }) => {\r\n\r\n  // COMPONENT STATE ----------------------------------------------------------\r\n\r\n  const [filename, setFilename] = useState('')\r\n\r\n  // HANDLERS -----------------------------------------------------------------\r\n\r\n  /**\r\n   * @desc Change handler for settign the file and filename.\r\n   */\r\n  const onChange = e => {\r\n    tryCatch(() => {\r\n      const file = e.target.files[0]\r\n      setFile(file)\r\n      setFilename(file.name)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @desc Resets the file and filename.\r\n   */\r\n  const onClear = () => {\r\n    tryCatch(() => {\r\n      setFile(null)\r\n      setFilename('')\r\n    })\r\n  }\r\n\r\n  const inputProps = {\r\n    id: inputId,\r\n    type: 'file',\r\n    style: {\r\n      display: 'none'\r\n    },\r\n    multiple: false,\r\n    accept: 'image/*',\r\n    value: '',\r\n    onChange\r\n  }\r\n\r\n  const buttonProps = {\r\n    classes: {\r\n      root: 'button'\r\n    },\r\n    variant: 'contained',\r\n    component: 'span'\r\n  }\r\n\r\n  /**\r\n   * @desc If filename is truthy, render the clear button.\r\n   */\r\n  const renderClearButton = () => {\r\n    if (filename) {\r\n      return (\r\n        <Button {...buttonProps} onClick={onClear}>\r\n          <ClearRoundedIcon />\r\n        </Button>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={`${className} image-selector`}>\r\n      <div>\r\n        {filename || ''}\r\n      </div>\r\n      <label htmlFor={inputId}>\r\n        <input {...inputProps} />\r\n        <Button {...buttonProps}>\r\n          <PhotoCameraIcon />\r\n        </Button>\r\n      </label>\r\n      {renderClearButton()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageSelector","import React from 'react'\r\nimport './Preview.scss'\r\n\r\n/**\r\n * @param {object} config\r\n * @param {string} url\r\n * @desc If url is truthy, render a preview of the image with the given config.\r\n */\r\nconst Preview = ({ config = {}, url = '' }) => {\r\n\r\n  // CONSTANTS ----------------------------------------------------------------\r\n\r\n  const { width, height, title } = config\r\n\r\n  // COMPONENTS ---------------------------------------------------------------\r\n\r\n  if (!url) return null\r\n\r\n  /**\r\n   * @desc Renders an image with the given config.\r\n   */\r\n  const renderImg = () => {\r\n    const props = {\r\n      className: 'img',\r\n      style: {\r\n        backgroundImage: `url(${url})`,\r\n        width, height\r\n      }\r\n    }\r\n    return (<div {...props} />)\r\n  }\r\n\r\n  return (\r\n    <div className={'preview'}>\r\n      <div className={'title'}>\r\n        {title || ''}\r\n      </div>\r\n      {renderImg()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preview","import React from 'react'\r\nimport ImageRoundedIcon from '@material-ui/icons/ImageRounded'\r\nimport { GLOBALS} from '../../utils/enums'\r\nimport './Header.scss'\r\n\r\n/**\r\n * @desc Header is displayed at the top of the page.\r\n */\r\nconst Header = () => {\r\n\r\n  // COMPONENTS ---------------------------------------------------------------\r\n\r\n  return (\r\n    <div className={'header display-grid app-label'}>\r\n      <ImageRoundedIcon />\r\n      {GLOBALS.TITLE}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React, { useState, useEffect } from 'react'\nimport { Transition} from 'react-transition-group'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { loadImage } from '../../utils'\nimport { YTConfig } from '../../utils/enums'\nimport Dimensions from '../Dimensions/Dimensions'\nimport ImageSelector from '../ImageSelector/ImageSelector'\nimport Preview from '../Preview/Preview'\nimport Header from '../Header/Header'\nimport './App.scss'\n\n/**\n * @desc Main entry point to the app.\n */\nconst App = () => {\n\n  // COMPONENT STATE ----------------------------------------------------------\n\n  const [dimensions, setDimensions] = useState(YTConfig)\n  const [file, setFile] = useState()\n  const [url, setUrl] = useState('')\n\n  // SIDE EFFECTS -------------------------------------------------------------\n\n  /**\n   * @desc Whenever file changes, update url.\n   */\n  useEffect(() => {\n    url && URL.revokeObjectURL(url)\n    if (file instanceof File) {\n      const newUrl = URL.createObjectURL(file)\n      loadImage(newUrl).then(setUrl)\n    } else {\n      setUrl('')\n    }\n  }, [file])\n\n  // COMPONENTS ---------------------------------------------------------------\n\n  /**\n   * @desc Image Preview should appear 1s after the url is truthy.\n   */\n  const renderPreview = () => {\n    const previewElements = dimensions\n      .filter(({ width, height }) => (width > 0) && (height > 0))\n      .map((config, i) => {\n        const props = { config, url }\n        return (<Preview {...props} />)\n      })\n    const transitionProps = {\n      in: !!url,\n      appear: true,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      timeout: {\n        enter: 1000\n      }\n    }\n    return (\n      <Transition {...transitionProps}>\n        {\n          state => (\n            <div className={`preview-container special-scroll ${state}`}>\n              {previewElements}\n            </div>\n          )\n        }\n      </Transition>\n    )\n  }\n\n  /**\n   * @desc Render a spinner if the file exists but not the URL.\n   */\n  const renderSpinner = () => {\n    if (file && !url) {\n      const props = {\n        classes: {\n          root: 'spinner'\n        },\n        variant: 'indeterminate'\n      }\n      return (<CircularProgress {...props} />)\n    }\n    return null\n  }\n\n  /**\n   * @desc Body consists of a file selector and image previews.\n   */\n  const renderBody = () => {\n    const props = {\n      className: url ? 'top' : 'center',\n      setFile, file\n    }\n    return (\n      <div className={'body'}>\n        <ImageSelector {...props} />\n        {renderPreview()}\n        {renderSpinner()}\n      </div>\n    )\n  }\n\n  /**\n   * @desc Right rail consists of a dimension form.\n   */\n  const renderRightRail = () => {\n    const props = { dimensions, setDimensions }\n    return (<Dimensions {...props} />)\n  }\n\n  return (\n    <div className={'app'}>\n      <Header />\n      <div className={'body-and-rails'}>\n        {renderBody()}\n        {renderRightRail()}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App/App'\nimport { GLOBALS } from \"./utils/enums\"\nimport './styles/reset.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\nReactDOM.render(GLOBALS.TITLE, document.querySelector('title'))"],"sourceRoot":""}